#!/bin/bash
# Standalone update script for easy-opal
# Updates to the latest version from GitHub using only git and basic shell commands

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Script configuration
REPO_URL="https://github.com/isglobal-brge/easy-opal.git"
BACKUP_DIR="backups/update_$(date +%Y%m%d_%H%M%S)"
CONFIG_FILES=("config.json" ".env" "data" "backups")

# Parse command line arguments
FORCE_UPDATE=false
BACKUP_CONFIGS=true

show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo "Update easy-opal to the latest version from GitHub"
    echo ""
    echo "Options:"
    echo "  --force          Force update even with local changes"
    echo "  --no-backup      Don't backup configuration files"
    echo "  --help, -h       Show this help message"
    echo ""
    echo "This script will:"
    echo "  1. Backup your current configuration files (unless --no-backup)"
    echo "  2. Update to the latest version from GitHub"
    echo "  3. Restore your configuration files"
    echo ""
    echo "After updating, you may need to run './setup' to update dependencies."
}

for arg in "$@"; do
    case $arg in
        --force)
            FORCE_UPDATE=true
            shift
            ;;
        --no-backup)
            BACKUP_CONFIGS=false
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $arg${NC}"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo -e "${CYAN}üöÄ Easy-OPAL Update Script${NC}"
echo "==============================="

# Check if we're in the right directory
if [ ! -f "easy-opal" ] || [ ! -f "pyproject.toml" ]; then
    echo -e "${RED}‚ùå Error: This doesn't appear to be the easy-opal directory${NC}"
    echo "Please run this script from the easy-opal root directory"
    exit 1
fi

# Check if git is available
if ! command -v git &> /dev/null; then
    echo -e "${RED}‚ùå Error: git is not installed or not in PATH${NC}"
    echo "Please install git to use this update script"
    exit 1
fi

# Check if we're in a git repository
if [ ! -d ".git" ]; then
    echo -e "${RED}‚ùå Error: This is not a git repository${NC}"
    echo "This update script only works with git-cloned installations"
    echo ""
    echo "To use this script, please:"
    echo "1. Back up your configuration files manually"
    echo "2. Remove this directory"
    echo "3. Clone fresh: git clone $REPO_URL"
    echo "4. Restore your configuration files"
    exit 1
fi

# Check current branch and remote
current_branch=$(git branch --show-current)
echo -e "${BLUE}üìç Current branch: $current_branch${NC}"

# Check if we have the correct remote
if ! git remote get-url origin | grep -q "easy-opal"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Remote origin doesn't appear to be the easy-opal repository${NC}"
    echo "Current remote: $(git remote get-url origin)"
    echo "Expected: $REPO_URL"
    
    if [ "$FORCE_UPDATE" = false ]; then
        echo ""
        echo "Use --force to proceed anyway, or check your git remote configuration"
        exit 1
    fi
fi

# Check for local changes
if [ "$FORCE_UPDATE" = false ] && ! git diff --quiet; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: You have uncommitted local changes${NC}"
    echo ""
    echo "Local changes detected:"
    git diff --name-only | sed 's/^/  - /'
    echo ""
    echo "Options:"
    echo "1. Commit your changes: git add . && git commit -m 'Local changes'"
    echo "2. Stash your changes: git stash"
    echo "3. Use --force to discard local changes"
    echo "4. Manually backup important files and re-run"
    exit 1
fi

# Check for untracked files that might be important
untracked_files=$(git ls-files --others --exclude-standard)
if [ -n "$untracked_files" ] && [ "$FORCE_UPDATE" = false ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: You have untracked files${NC}"
    echo ""
    echo "Untracked files:"
    echo "$untracked_files" | sed 's/^/  - /'
    echo ""
    echo "These files will be preserved, but consider committing important ones"
    echo "Use --force to proceed without this warning"
    echo ""
    read -p "Continue anyway? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Backup configuration files
if [ "$BACKUP_CONFIGS" = true ]; then
    echo -e "${CYAN}üì¶ Backing up configuration files...${NC}"
    mkdir -p "$BACKUP_DIR"
    
    for file in "${CONFIG_FILES[@]}"; do
        if [ -e "$file" ]; then
            echo "  - Backing up $file"
            cp -r "$file" "$BACKUP_DIR/" 2>/dev/null || true
        fi
    done
    
    # Also backup any .env files in subdirectories
    find . -name ".env" -not -path "./.git/*" -not -path "./backups/*" -exec cp {} "$BACKUP_DIR/" \; 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Configuration backed up to $BACKUP_DIR${NC}"
fi

# Show current version (if we can determine it)
current_commit=$(git rev-parse --short HEAD)
echo -e "${BLUE}üìä Current version: $current_commit${NC}"

# Fetch latest changes
echo -e "${CYAN}üîÑ Fetching latest changes from GitHub...${NC}"
if ! git fetch origin; then
    echo -e "${RED}‚ùå Error: Failed to fetch from remote repository${NC}"
    echo "Please check your internet connection and GitHub access"
    exit 1
fi

# Check if we're behind
commits_behind=$(git rev-list --count HEAD..origin/$current_branch 2>/dev/null || echo "unknown")
if [ "$commits_behind" = "0" ]; then
    echo -e "${GREEN}‚úÖ Already up to date!${NC}"
    latest_commit=$(git rev-parse --short origin/$current_branch)
    echo -e "${BLUE}üìä Latest version: $latest_commit${NC}"
    exit 0
elif [ "$commits_behind" != "unknown" ]; then
    echo -e "${YELLOW}üìà $commits_behind commits behind the latest version${NC}"
fi

# Show what's new
echo -e "${CYAN}üìù Recent changes:${NC}"
git log --oneline --decorate -5 origin/$current_branch | sed 's/^/  /'

# Confirm update
if [ "$FORCE_UPDATE" = false ]; then
    echo ""
    read -p "Proceed with update? [Y/n] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo "Update cancelled"
        exit 0
    fi
fi

# Perform the update
echo -e "${CYAN}‚¨ÜÔ∏è  Updating to latest version...${NC}"

if [ "$FORCE_UPDATE" = true ]; then
    # Force update - reset to latest
    echo "  - Force updating (discarding local changes)"
    git reset --hard origin/$current_branch
else
    # Try to merge or rebase
    echo "  - Merging latest changes"
    if ! git merge origin/$current_branch; then
        echo -e "${RED}‚ùå Error: Merge failed with conflicts${NC}"
        echo ""
        echo "Please resolve conflicts manually:"
        echo "1. Fix conflicts in the listed files"
        echo "2. Run: git add <resolved-files>"
        echo "3. Run: git commit"
        echo "4. Re-run this update script"
        echo ""
        echo "Or use --force to discard local changes"
        exit 1
    fi
fi

# Update successful
new_commit=$(git rev-parse --short HEAD)
echo -e "${GREEN}‚úÖ Update successful!${NC}"
echo -e "${BLUE}üìä New version: $new_commit${NC}"

# Restore configuration files
if [ "$BACKUP_CONFIGS" = true ]; then
    echo -e "${CYAN}üîÑ Restoring configuration files...${NC}"
    
    for file in "${CONFIG_FILES[@]}"; do
        if [ -e "$BACKUP_DIR/$file" ]; then
            echo "  - Restoring $file"
            cp -r "$BACKUP_DIR/$file" ./ 2>/dev/null || true
        fi
    done
    
    echo -e "${GREEN}‚úÖ Configuration files restored${NC}"
fi

# Make scripts executable
chmod +x easy-opal setup update 2>/dev/null || true

echo ""
echo -e "${GREEN}üéâ Update completed successfully!${NC}"
echo ""
echo "Summary:"
echo "  - Updated from $current_commit to $new_commit"
if [ "$BACKUP_CONFIGS" = true ]; then
    echo "  - Configuration backed up to: $BACKUP_DIR"
    echo "  - Configuration files restored"
fi
echo ""
echo "Next steps:"
echo "  - Test your installation: ./easy-opal --help"
echo "  - Check configuration: ./easy-opal config show"
echo "  - Run dependencies update: ./setup"
echo "" 